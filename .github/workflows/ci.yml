name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

jobs:
  # ---------- Sourcery auto-fix (PRs only) ----------
  sourcery_autofix:
    name: Sourcery (auto-fix and push)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Sourcery and tools
        run: |
          python -m pip install --upgrade pip
          pip install "sourcery==1.21.0" "ruff==0.6.8"

      - name: Run Sourcery auto-fix
        run: sourcery review --fix .

      - name: Format after fixes (Ruff)
        run: ruff format .

      # Only push changes for same-repo PRs (not forks)
      - name: Commit & push if changes (same-repo PRs only)
        if: ${{ github.repository == github.event.pull_request.head.repo.full_name }}
        run: |
          set -e
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "chore(sourcery): auto-fix refactors via CI"
            git push
          else
            echo "No Sourcery changes to commit."
          fi

      # Fails the job if non-auto-fixable issues remain
      - name: Final check – fail if issues remain
        run: sourcery review .

  # ---------- Python backend (lint • sec • test) ----------
  backend:
    name: Python backend (lint • sec • test)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (requirements if present, else pinned toolchain)
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          python -m pip install "ruff==0.6.8" "flake8==7.1.1" "bandit==1.7.9" \
                                "pytest==8.3.2" "pytest-django==4.8.0" "coverage==7.6.1"

      - name: Print versions
        run: |
          python --version
          ruff --version
          flake8 --version
          bandit --version
          pytest --version

      - name: Ruff (lint)
        run: ruff check --output-format=github .

      - name: Ruff (format check)
        run: ruff format --check .

      # Relax long-line enforcement so E501 won't fail CI
      - name: Flake8 (max line length = 120)
        run: flake8 --max-line-length=120 .

      - name: Bandit
        run: |
          if [ -f ".bandit.yaml" ]; then
            bandit -q -c .bandit.yaml -r .
          elif [ -f ".bandit.yml" ]; then
            bandit -q -c .bandit.yml -r .
          elif [ -f ".bandit" ]; then
            first_char=$(grep -v '^\s*$' .bandit | grep -v '^\s*#' | head -n1 | cut -c1-1 || true)
            if [ "$first_char" = "[" ]; then
              bandit -q -r . -x tests,*/migrations,venv,.venv,node_modules,dist,build -s B101,B311
            else
              bandit -q -c .bandit -r .
            fi
          else
            bandit -q -r . -x tests,*/migrations,venv,.venv,node_modules,dist,build -s B101,B311
          fi

      # Dynamically discover a usable Django settings module before pytest
      - name: Pick Django settings module
        id: pick_ds
        run: |
          python - <<'PY'
          import importlib.util, sys
          candidates = ("config.settings_test","config.settings","settings_test","settings")
          for m in candidates:
            if importlib.util.find_spec(m) is not None:
              print(f"::set-output name=ds::{m}")
              sys.exit(0)
          print("::error::No Django settings module found (looked for config.settings_test, config.settings, settings_test, settings)")
          sys.exit(1)
          PY

      - name: Pytest
        env:
          DJANGO_SETTINGS_MODULE: ${{ steps.pick_ds.outputs.ds }}
          DJANGO_ENV: test
          NO_EXTERNAL_HTTP: "1"
        run: |
          set +e
          coverage run -m pytest -q
          code=$?
          if [ "$code" = "5" ]; then
            echo "No tests collected (exit 5). Treating as success during bootstrap."
            exit 0
          fi
          exit $code

      - name: Coverage XML
        if: always()
        run: |
          if [ -f ".coverage" ]; then coverage xml -o coverage.xml || true; fi
