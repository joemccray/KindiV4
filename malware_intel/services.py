import logging
import os

from ip_rotator.services import get_rotated_session

from .models import MalwareIndicator

logger = logging.getLogger(__name__)

URLHAUS_API_BASE_URL = "https://urlhaus-api.abuse.ch"
URLHAUS_AUTH_KEY = os.environ.get("URLHAUS_AUTH_KEY")


def _query_urlhaus(endpoint: str, post_data: dict) -> dict:
    """
    A helper function to query the URLhaus API.
    """
    if not URLHAUS_AUTH_KEY:
        raise ValueError("URLHAUS_AUTH_KEY is not set in environment.")

    get_rotated_session(URLHAUS_API_BASE_URL)
    # headers = {"Auth-Key": URLHAUS_AUTH_KEY}

    # Placeholder for the actual API call
    # response = session.post(f"{URLHAUS_API_BASE_URL}{endpoint}", data=post_data, headers=headers)
    # response.raise_for_status()
    # return response.json()

    # Simulate a "not_found" response
    return {"query_status": "no_results"}


def query_urlhaus_by_url(url: str) -> MalwareIndicator:
    """
    Queries URLhaus for a specific URL.
    """
    # response_data = _query_urlhaus("/v1/url/", {"url": url})
    response_data = {"query_status": "no_results"}  # Placeholder

    indicator, _ = MalwareIndicator.objects.update_or_create(
        value=url,
        type=MalwareIndicator.IndicatorType.URL,
        defaults={"raw_data": response_data},
    )
    return indicator


def query_urlhaus_by_host(host: str) -> MalwareIndicator:
    """
    Queries URLhaus for a specific host.
    """
    response_data = {"query_status": "no_results"}  # Placeholder

    indicator, _ = MalwareIndicator.objects.update_or_create(
        value=host,
        type=MalwareIndicator.IndicatorType.HOST,
        defaults={"raw_data": response_data},
    )
    return indicator


def query_urlhaus_by_hash(file_hash: str) -> MalwareIndicator:
    """
    Queries URLhaus for a specific file hash.
    """
    # Basic type inference
    # post_key = "md5_hash" if len(file_hash) == 32 else "sha256_hash"

    response_data = {"query_status": "no_results"}  # Placeholder

    indicator, _ = MalwareIndicator.objects.update_or_create(
        value=file_hash,
        type=MalwareIndicator.IndicatorType.HASH,
        defaults={"raw_data": response_data},
    )
    return indicator
