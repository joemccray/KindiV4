from .models import MalwareIndicator
from .tasks import (
    task_query_urlhaus_by_hash,
    task_query_urlhaus_by_host,
    task_query_urlhaus_by_url,
)


def query_urlhaus_by_url(url: str) -> MalwareIndicator:
    """
    Triggers an asynchronous task to query URLhaus for a specific URL.
    """
    indicator, _ = MalwareIndicator.objects.get_or_create(
        value=url,
        type=MalwareIndicator.IndicatorType.URL,
        defaults={"raw_data": {}},
    )
    task_query_urlhaus_by_url.delay(url)
    return indicator


def query_urlhaus_by_host(host: str) -> MalwareIndicator:
    """
    Triggers an asynchronous task to query URLhaus for a specific host.
    """
    indicator, _ = MalwareIndicator.objects.get_or_create(
        value=host,
        type=MalwareIndicator.IndicatorType.HOST,
        defaults={"raw_data": {}},
    )
    task_query_urlhaus_by_host.delay(host)
    return indicator


def query_urlhaus_by_hash(file_hash: str) -> MalwareIndicator:
    """
    Triggers an asynchronous task to query URLhaus for a specific file hash.
    """
    if len(file_hash) == 32 or len(file_hash) == 64:
        hash_type = MalwareIndicator.IndicatorType.HASH
    else:
        raise ValueError("Invalid hash format. Must be MD5 or SHA256.")

    indicator, _ = MalwareIndicator.objects.get_or_create(
        value=file_hash, type=hash_type, defaults={"raw_data": {}}
    )
    task_query_urlhaus_by_hash.delay(file_hash)
    return indicator
