import logging
import os

import requests

from ip_rotator.services import get_rotated_session

from .models import MalwareIndicator

logger = logging.getLogger(__name__)

URLHAUS_API_BASE_URL = "https://urlhaus-api.abuse.ch"


def _query_urlhaus(endpoint: str, post_data: dict) -> dict:
    """
    A helper function to query the URLhaus API.
    """
    api_key = os.environ.get("URLHAUS_AUTH_KEY")
    if not api_key:
        raise ValueError("URLHAUS_AUTH_KEY is not set in environment.")

    session = get_rotated_session(URLHAUS_API_BASE_URL)
    headers = {"Auth-Key": api_key}

    try:
        response = session.post(
            f"{URLHAUS_API_BASE_URL}{endpoint}",
            data=post_data,
            headers=headers,
            timeout=20,
        )
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"URLhaus API request failed: {e}")
        return {"query_status": "request_error", "error": str(e)}
    except Exception as e:
        logger.error(f"An unexpected error occurred during URLhaus query: {e}")
        return {"query_status": "unexpected_error", "error": str(e)}


def query_urlhaus_by_url(url: str) -> MalwareIndicator:
    """
    Queries URLhaus for a specific URL.
    """
    response_data = _query_urlhaus("/v1/url/", {"url": url})

    indicator, _ = MalwareIndicator.objects.update_or_create(
        value=url,
        type=MalwareIndicator.IndicatorType.URL,
        defaults={"raw_data": response_data},
    )
    return indicator


def query_urlhaus_by_host(host: str) -> MalwareIndicator:
    """
    Queries URLhaus for a specific host.
    """
    response_data = _query_urlhaus("/v1/host/", {"host": host})

    indicator, _ = MalwareIndicator.objects.update_or_create(
        value=host,
        type=MalwareIndicator.IndicatorType.HOST,
        defaults={"raw_data": response_data},
    )
    return indicator


def query_urlhaus_by_hash(file_hash: str) -> MalwareIndicator:
    """
    Queries URLhaus for a specific file hash.
    """
    if len(file_hash) == 32:
        post_key = "md5_hash"
        hash_type = MalwareIndicator.IndicatorType.HASH
    elif len(file_hash) == 64:
        post_key = "sha256_hash"
        hash_type = MalwareIndicator.IndicatorType.HASH
    else:
        raise ValueError("Invalid hash format. Must be MD5 or SHA256.")

    response_data = _query_urlhaus("/v1/payload/", {post_key: file_hash})

    indicator, _ = MalwareIndicator.objects.update_or_create(
        value=file_hash,
        type=hash_type,
        defaults={"raw_data": response_data},
    )
    return indicator
