import os
from unittest.mock import patch

from django.contrib.auth.models import User
from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from . import services
from .models import MalwareIndicator


class MalwareIntelModelTest(TestCase):
    def test_create_malware_indicator(self):
        indicator = MalwareIndicator.objects.create(
            value="http://evil.com/payload.exe",
            type=MalwareIndicator.IndicatorType.URL,
            raw_data={"status": "ok"},
        )
        self.assertEqual(MalwareIndicator.objects.count(), 1)
        self.assertEqual(str(indicator), "URL: http://evil.com/payload.exe")


@patch.dict(os.environ, {"URLHAUS_AUTH_KEY": "test-key"})
class MalwareIntelServiceTest(TestCase):
    @patch("malware_intel.services.task_query_urlhaus_by_url.delay")
    def test_query_by_url_triggers_task(self, mock_delay):
        url = "http://evil.com/payload.exe"
        services.query_urlhaus_by_url(url)
        self.assertTrue(MalwareIndicator.objects.filter(value=url).exists())
        mock_delay.assert_called_once_with(url)

    @patch("malware_intel.services.task_query_urlhaus_by_host.delay")
    def test_query_by_host_triggers_task(self, mock_delay):
        host = "evil.com"
        services.query_urlhaus_by_host(host)
        self.assertTrue(MalwareIndicator.objects.filter(value=host).exists())
        mock_delay.assert_called_once_with(host)

    @patch("malware_intel.services.task_query_urlhaus_by_hash.delay")
    def test_query_by_hash_triggers_task(self, mock_delay):
        file_hash = "a" * 32
        services.query_urlhaus_by_hash(file_hash)
        self.assertTrue(MalwareIndicator.objects.filter(value=file_hash).exists())
        mock_delay.assert_called_once_with(file_hash)


class MalwareIntelApiTest(APITestCase):
    def setUp(self):
        self.user = User.objects.create_user(username="testuser")
        self.client.force_authenticate(user=self.user)

    @patch("malware_intel.views.services.query_urlhaus_by_url")
    def test_url_query_api(self, mock_query_service):
        test_url = "http://evil.com/payload.exe"
        mock_indicator = MalwareIndicator(
            value=test_url,
            type=MalwareIndicator.IndicatorType.URL,
            raw_data={"query_status": "ok"},
        )
        mock_query_service.return_value = mock_indicator

        url = reverse("malware-url-query")
        data = {"query": test_url}
        response = self.client.post(url, data, format="json")

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_query_service.assert_called_once_with(test_url)
        self.assertEqual(response.data["value"], test_url)
