from unittest.mock import patch

from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from .models import MalwareIndicator


class MalwareIntelModelTest(TestCase):
    def test_create_malware_indicator(self):
        indicator = MalwareIndicator.objects.create(
            value="http://evil.com/payload.exe",
            type=MalwareIndicator.IndicatorType.URL,
            raw_data={"status": "ok"},
        )
        self.assertEqual(MalwareIndicator.objects.count(), 1)
        self.assertEqual(str(indicator), "URL: http://evil.com/payload.exe")


class MalwareIntelApiTest(APITestCase):
    @patch("malware_intel.views.services.query_urlhaus_by_url")
    def test_url_query_api(self, mock_query_service):
        test_url = "http://evil.com/payload.exe"
        mock_indicator = MalwareIndicator(
            value=test_url,
            type=MalwareIndicator.IndicatorType.URL,
            raw_data={"query_status": "ok"},
        )
        mock_query_service.return_value = mock_indicator

        url = reverse("malware-url-query")
        data = {"query": test_url}

        response = self.client.post(url, data, format="json")

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_query_service.assert_called_once_with(test_url)
        self.assertEqual(response.data["value"], test_url)

    @patch("malware_intel.views.services.query_urlhaus_by_host")
    def test_host_query_api(self, mock_query_service):
        test_host = "evil.com"
        mock_indicator = MalwareIndicator(
            value=test_host,
            type=MalwareIndicator.IndicatorType.HOST,
            raw_data={"query_status": "ok"},
        )
        mock_query_service.return_value = mock_indicator

        url = reverse("malware-host-query")
        data = {"query": test_host}

        response = self.client.post(url, data, format="json")

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_query_service.assert_called_once_with(test_host)
        self.assertEqual(response.data["value"], test_host)

    @patch("malware_intel.views.services.query_urlhaus_by_hash")
    def test_hash_query_api(self, mock_query_service):
        test_hash = "a" * 32  # MD5
        mock_indicator = MalwareIndicator(
            value=test_hash,
            type=MalwareIndicator.IndicatorType.HASH,
            raw_data={"query_status": "ok"},
        )
        mock_query_service.return_value = mock_indicator

        url = reverse("malware-hash-query")
        data = {"query": test_hash}

        response = self.client.post(url, data, format="json")

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_query_service.assert_called_once_with(test_hash)
        self.assertEqual(response.data["value"], test_hash)

    def test_query_api_missing_query(self):
        """
        Test that the API returns a 400 Bad Request if the query is missing.
        """
        url = reverse("malware-url-query")
        data = {"wrong_key": "some_value"}

        response = self.client.post(url, data, format="json")

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
