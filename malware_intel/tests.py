import os
from unittest.mock import MagicMock, patch

from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from . import services
from .models import MalwareIndicator


class MalwareIntelModelTest(TestCase):
    def test_create_malware_indicator(self):
        indicator = MalwareIndicator.objects.create(
            value="http://evil.com/payload.exe",
            type=MalwareIndicator.IndicatorType.URL,
            raw_data={"status": "ok"},
        )
        self.assertEqual(MalwareIndicator.objects.count(), 1)
        self.assertEqual(str(indicator), "URL: http://evil.com/payload.exe")


@patch.dict(os.environ, {"URLHAUS_AUTH_KEY": "test-key"})
class MalwareIntelServiceTest(TestCase):
    @patch("malware_intel.services.get_rotated_session")
    def test_query_by_url_service(self, mock_get_session):
        mock_session = MagicMock()
        mock_get_session.return_value = mock_session
        mock_response = MagicMock(status_code=200)
        mock_response.json.return_value = {"query_status": "ok", "id": "123"}
        mock_session.post.return_value = mock_response

        test_url = "http://evil.com/bad.exe"
        indicator = services.query_urlhaus_by_url(test_url)

        self.assertEqual(indicator.value, test_url)
        self.assertEqual(indicator.type, MalwareIndicator.IndicatorType.URL)
        self.assertEqual(indicator.raw_data["id"], "123")
        mock_session.post.assert_called_once_with(
            "https://urlhaus-api.abuse.ch/v1/url/",
            data={"url": test_url},
            headers={"Auth-Key": "test-key"},
            timeout=20,
        )

    @patch("malware_intel.services.get_rotated_session")
    def test_query_by_hash_service(self, mock_get_session):
        mock_session = MagicMock()
        mock_get_session.return_value = mock_session
        mock_response = MagicMock(status_code=200)
        mock_response.json.return_value = {"query_status": "ok", "md5_hash": "a" * 32}
        mock_session.post.return_value = mock_response

        test_hash = "a" * 32
        indicator = services.query_urlhaus_by_hash(test_hash)

        self.assertEqual(indicator.value, test_hash)
        self.assertEqual(indicator.type, MalwareIndicator.IndicatorType.HASH)
        mock_session.post.assert_called_once_with(
            "https://urlhaus-api.abuse.ch/v1/payload/",
            data={"md5_hash": test_hash},
            headers={"Auth-Key": "test-key"},
            timeout=20,
        )


class MalwareIntelApiTest(APITestCase):
    @patch("malware_intel.views.services.query_urlhaus_by_url")
    def test_url_query_api(self, mock_query_service):
        test_url = "http://evil.com/payload.exe"
        mock_indicator = MalwareIndicator(
            value=test_url,
            type=MalwareIndicator.IndicatorType.URL,
            raw_data={"query_status": "ok"},
        )
        mock_query_service.return_value = mock_indicator

        url = reverse("malware-url-query")
        data = {"query": test_url}
        response = self.client.post(url, data, format="json")

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_query_service.assert_called_once_with(test_url)
        self.assertEqual(response.data["value"], test_url)
