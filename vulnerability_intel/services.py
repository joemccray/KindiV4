import logging
import os

from .models import Vulnerability, VulnerabilitySourceData

logger = logging.getLogger(__name__)

NVD_API_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
VULNERS_API_BASE_URL = "https://vulners.com/api/v3/search/id/"

NVD_API_KEY = os.environ.get("NVD_API_KEY")
VULNERS_API_KEY = os.environ.get("VULNERS_API_KEY")


def _get_nvd_data(cve_id: str) -> dict:
    """
    (Placeholder) Fetches vulnerability data from the NVD API.
    """
    logger.info(f"Fetching NVD data for {cve_id}...")
    # session = get_rotated_session(NVD_API_BASE_URL)
    # headers = {"apiKey": NVD_API_KEY} if NVD_API_KEY else {}
    # response = session.get(f"{NVD_API_BASE_URL}?cveId={cve_id}", headers=headers)
    # response.raise_for_status()
    # return response.json()
    return {}


def _get_vulners_data(cve_id: str) -> dict:
    """
    (Placeholder) Fetches vulnerability data from the Vulners API.
    """
    logger.info(f"Fetching Vulners data for {cve_id}...")
    # session = get_rotated_session(VULNERS_API_BASE_URL)
    # headers = {"X-Api-Key": VULNERS_API_KEY}
    # payload = {"id": cve_id}
    # response = session.post(VULNERS_API_BASE_URL, json=payload, headers=headers)
    # response.raise_for_status()
    # return response.json()
    return {}


def get_vulnerability_intel(cve_id: str) -> Vulnerability:
    """
    Orchestrates fetching data from all sources, normalizing it,
    and saving it to the database.
    """
    nvd_data = _get_nvd_data(cve_id)
    vulners_data = _get_vulners_data(cve_id)

    # For now, just create a basic record.
    # The real implementation will parse the responses to populate these fields.
    vuln, created = Vulnerability.objects.update_or_create(
        id=cve_id, defaults={"description": f"Data for {cve_id}"}
    )

    if nvd_data:
        VulnerabilitySourceData.objects.update_or_create(
            vulnerability=vuln,
            source=VulnerabilitySourceData.Source.NVD,
            defaults={"raw_data": nvd_data},
        )

    if vulners_data:
        VulnerabilitySourceData.objects.update_or_create(
            vulnerability=vuln,
            source=VulnerabilitySourceData.Source.VULNERS,
            defaults={"raw_data": vulners_data},
        )

    return vuln
