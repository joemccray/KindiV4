import os
from unittest.mock import MagicMock, patch

from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from . import services
from .models import (
    Vulnerability,
    VulnerabilityReference,
    VulnerabilitySourceData,
)


class VulnerabilityIntelModelTest(TestCase):
    def test_create_vulnerability(self):
        vuln = Vulnerability.objects.create(
            id="CVE-2023-12345", description="A test vulnerability."
        )
        self.assertEqual(Vulnerability.objects.count(), 1)
        self.assertEqual(str(vuln), "CVE-2023-12345")


@patch.dict(os.environ, {"NVD_API_KEY": "nvd-key", "VULNERS_API_KEY": "vulners-key"})
class VulnerabilityIntelServiceTest(TestCase):
    @patch("vulnerability_intel.services.get_rotated_session")
    def test_get_vulnerability_intel_service(self, mock_get_session):
        # Setup Mocks
        mock_session = MagicMock()
        mock_get_session.return_value = mock_session

        # Mock NVD response
        mock_nvd_response = MagicMock(status_code=200)
        mock_nvd_response.json.return_value = {
            "vulnerabilities": [
                {
                    "cve": {
                        "id": "CVE-2023-12345",
                        "descriptions": [{"lang": "en", "value": "NVD description."}],
                        "metrics": {
                            "cvssMetricV31": [
                                {
                                    "cvssData": {
                                        "baseScore": 9.8,
                                        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                                    }
                                }
                            ]
                        },
                        "references": [{"url": "https://nvd.nist.gov"}],
                    }
                }
            ]
        }

        # Mock Vulners response
        mock_vulners_response = MagicMock(status_code=200)
        mock_vulners_response.json.return_value = {
            "result": "OK",
            "data": {"documents": {}},
        }

        # The session will be used twice, once for NVD (get) and once for Vulners (post)
        mock_session.get.return_value = mock_nvd_response
        mock_session.post.return_value = mock_vulners_response

        # Action
        cve_id = "CVE-2023-12345"
        indicator = services.get_vulnerability_intel(cve_id)

        # Assertions
        self.assertEqual(indicator.id, cve_id)
        self.assertEqual(indicator.description, "NVD description.")
        self.assertEqual(indicator.cvss_v3_score, 9.8)
        self.assertEqual(VulnerabilityReference.objects.count(), 1)
        self.assertEqual(
            VulnerabilityReference.objects.first().url, "https://nvd.nist.gov"
        )
        self.assertEqual(VulnerabilitySourceData.objects.count(), 2)
        self.assertTrue(
            VulnerabilitySourceData.objects.filter(
                source=VulnerabilitySourceData.Source.NVD
            ).exists()
        )
        self.assertTrue(
            VulnerabilitySourceData.objects.filter(
                source=VulnerabilitySourceData.Source.VULNERS
            ).exists()
        )

        # Check that the session was created and used
        mock_get_session.assert_called_once()
        mock_session.get.assert_called_once()
        mock_session.post.assert_called_once()


class VulnerabilityIntelApiTest(APITestCase):
    @patch("vulnerability_intel.views.services.get_vulnerability_intel")
    def test_retrieve_vulnerability_api(self, mock_get_intel):
        cve_id = "CVE-2023-99999"
        mock_vuln = Vulnerability(id=cve_id)
        mock_get_intel.return_value = mock_vuln

        # Create the object so the view can find it after the service call
        Vulnerability.objects.create(id=cve_id)

        url = reverse("vulnerability-detail", kwargs={"id": cve_id})
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_get_intel.assert_called_once_with(cve_id)
        self.assertEqual(response.data["id"], cve_id)
