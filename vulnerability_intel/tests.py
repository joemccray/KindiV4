import os
from unittest.mock import patch

from django.contrib.auth.models import User
from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from . import services
from .models import (
    Vulnerability,
)


class VulnerabilityIntelModelTest(TestCase):
    def test_create_vulnerability(self):
        vuln = Vulnerability.objects.create(
            id="CVE-2023-12345", description="A test vulnerability."
        )
        self.assertEqual(Vulnerability.objects.count(), 1)
        self.assertEqual(str(vuln), "CVE-2023-12345")


@patch.dict(os.environ, {"NVD_API_KEY": "nvd-key", "VULNERS_API_KEY": "vulners-key"})
class VulnerabilityIntelServiceTest(TestCase):
    @patch("vulnerability_intel.services.task_get_vulnerability_intel.delay")
    def test_get_vulnerability_intel_triggers_task(self, mock_delay):
        """
        Test that the service function triggers the celery task.
        """
        cve_id = "CVE-2023-12345"
        services.get_vulnerability_intel(cve_id)

        # Check that a placeholder vulnerability object is created immediately
        self.assertTrue(Vulnerability.objects.filter(id=cve_id).exists())
        # Check that the Celery task was called to fetch the full data
        mock_delay.assert_called_once_with(cve_id)


class VulnerabilityIntelApiTest(APITestCase):
    def setUp(self):
        self.user = User.objects.create_user(username="testuser")
        self.client.force_authenticate(user=self.user)

    @patch("vulnerability_intel.views.services.get_vulnerability_intel")
    def test_retrieve_vulnerability_api(self, mock_get_intel):
        cve_id = "CVE-2023-99999"
        mock_vuln = Vulnerability(id=cve_id)
        mock_get_intel.return_value = mock_vuln

        # Create the object so the view can find it after the service call
        Vulnerability.objects.create(id=cve_id)

        url = reverse("vulnerability-detail", kwargs={"id": cve_id})
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        mock_get_intel.assert_called_once_with(cve_id)
        self.assertEqual(response.data["id"], cve_id)
