import logging
import os

import requests
from celery import shared_task

from ip_rotator.services import get_rotated_session

from .models import (
    Vulnerability,
    VulnerabilityReference,
    VulnerabilitySourceData,
)

logger = logging.getLogger(__name__)

NVD_API_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
VULNERS_API_BASE_URL = "https://vulners.com/api/v3/search/id/"


def _get_nvd_data(session, cve_id: str) -> dict:
    """Fetches vulnerability data from the NVD API."""
    api_key = os.environ.get("NVD_API_KEY")
    headers = {"apiKey": api_key} if api_key else {}
    try:
        response = session.get(
            f"{NVD_API_BASE_URL}?cveId={cve_id}", headers=headers, timeout=20
        )
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"NVD API request for {cve_id} failed: {e}")
        return {}


def _get_vulners_data(session, cve_id: str) -> dict:
    """Fetches vulnerability data from the Vulners API."""
    api_key = os.environ.get("VULNERS_API_KEY")
    if not api_key:
        logger.warning("VULNERS_API_KEY not set. Skipping Vulners query.")
        return {}
    headers = {"X-Api-Key": api_key}
    payload = {"id": cve_id}
    try:
        response = session.post(
            VULNERS_API_BASE_URL, json=payload, headers=headers, timeout=20
        )
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"Vulners API request for {cve_id} failed: {e}")
        return {}


@shared_task
def task_get_vulnerability_intel(cve_id: str):
    """
    Celery task to orchestrate fetching data from all sources, normalizing it,
    and saving it to the database.
    """
    session = get_rotated_session(NVD_API_BASE_URL)
    nvd_data = _get_nvd_data(session, cve_id)
    vulners_data = _get_vulners_data(session, cve_id)

    vuln, _ = Vulnerability.objects.get_or_create(id=cve_id)

    if nvd_data and nvd_data.get("vulnerabilities"):
        nvd_vuln_data = nvd_data["vulnerabilities"][0]["cve"]
        vuln.description = nvd_vuln_data["descriptions"][0]["value"]
        if "cvssMetricV31" in nvd_vuln_data["metrics"]:
            cvss_data = nvd_vuln_data["metrics"]["cvssMetricV31"][0]["cvssData"]
            vuln.cvss_v3_score = cvss_data["baseScore"]
            vuln.cvss_v3_vector = cvss_data["vectorString"]
        vuln.save()
        VulnerabilitySourceData.objects.update_or_create(
            vulnerability=vuln,
            source=VulnerabilitySourceData.Source.NVD,
            defaults={"raw_data": nvd_data},
        )
        vuln.references.all().delete()
        for ref in nvd_vuln_data.get("references", []):
            VulnerabilityReference.objects.create(vulnerability=vuln, url=ref["url"])

    if vulners_data and vulners_data.get("result") == "OK":
        VulnerabilitySourceData.objects.update_or_create(
            vulnerability=vuln,
            source=VulnerabilitySourceData.Source.VULNERS,
            defaults={"raw_data": vulners_data},
        )

    return vuln.id
